import {
  SettingActionType,
  SettingId,
  SettingsState,
  ThemeSetting,
} from 'src/@types/types';

import {
  validateInvisible,
  validateLength,
  validateToLowerCase,
  validateTrim,
  validateUriReserved,
} from './helpers';

export const INVISIBLE = [
  '0009',
  '0020',
  '00A0',
  '00AD',
  '034F',
  '061C',
  '115F',
  '1160',
  '17B4',
  '17B5',
  '180E',
  '2000',
  '2001',
  '2002',
  '2003',
  '2004',
  '2005',
  '2006',
  '2007',
  '2008',
  '2009',
  '200A',
  '200B',
  '200C',
  '200D',
  '200E',
  '200F',
  '202F',
  '205F',
  '2060',
  '2061',
  '2062',
  '2063',
  '2064',
  '206A',
  '206B',
  '206C',
  '206D',
  '206E',
  '206F',
  '3000',
  '2800',
  '3164',
  'FEFF',
  'FFA0',
  '1D159',
  '1D173',
  '1D174',
  '1D175',
  '1D176',
  '1D177',
  '1D178',
  '1D179',
  '1D17A',
];

export const SETTINGS_TEXT = {
  toLowerCase: {
    label: 'uppercase',
    helperText: 'optionally replace with lowercase',
  },
  trim: {
    label: 'outer whitespace',
    helperText: 'start/end whitespace and terminators',
  },
  invisibleChar: {
    label: 'invisible characters',
    helperText: 'uncommon non-visible/empty characters',
  },
  uriReserved: {
    label: 'uri reserved characters',
    helperText: 'optionally encode as UTF-8',
  },
  outputLength: {
    label: 'length',
    helperText: 'validation for output character count',
  },
  findReplace: { label: 'find', helperText: '' },
};

export const INITIAL_SETTINGS_STATE = {
  userAgent: '',
  theme: ThemeSetting.LIGHT,
  outputValidation: [
    {
      id: SettingId.TO_LOWERCASE,
      label: SETTINGS_TEXT.toLowerCase.label,
      helperText: SETTINGS_TEXT.toLowerCase.helperText,
      isActive: true,
      validate: validateToLowerCase,
      validActions: [
        SettingActionType.WARN,
        SettingActionType.REMOVE,
        SettingActionType.REPLACE,
      ],
      curAction: SettingActionType.REPLACE,
    },
    {
      id: SettingId.TRIM,
      label: SETTINGS_TEXT.trim.label,
      helperText: SETTINGS_TEXT.trim.helperText,
      isActive: false,
      validate: validateTrim,
      validActions: [SettingActionType.WARN, SettingActionType.REMOVE],
      curAction: SettingActionType.WARN,
      replaceValue: '',
    },
    {
      id: SettingId.INVISIBLE,
      label: SETTINGS_TEXT.invisibleChar.label,
      helperText: SETTINGS_TEXT.invisibleChar.helperText,
      isActive: false,
      validate: validateInvisible,
      validActions: [SettingActionType.WARN, SettingActionType.REMOVE],
      curAction: SettingActionType.WARN,
    },
    {
      id: SettingId.URI_RESERVED,
      label: SETTINGS_TEXT.uriReserved.label,
      helperText: SETTINGS_TEXT.uriReserved.helperText,
      isActive: false,
      validate: validateUriReserved,
      validActions: [
        SettingActionType.WARN,
        SettingActionType.REMOVE,
        SettingActionType.REPLACE,
      ],
      curAction: SettingActionType.WARN,
    },
    {
      id: SettingId.LENGTH,
      label: SETTINGS_TEXT.outputLength.label,
      helperText: SETTINGS_TEXT.outputLength.helperText,
      isActive: false,
      validate: validateLength,
      validActions: [SettingActionType.WARN],
      curAction: SettingActionType.WARN,
      targetLength: 33,
    },
    // {
    //   id: SettingId.FIND,
    //   label: SETTINGS_TEXT.findReplace.label,
    //   helperText: SETTINGS_TEXT.findReplace.helperText,
    //   isActive: false,
    //   actionType: SettingActionType.WARN,
    // },
  ],
} as SettingsState;
